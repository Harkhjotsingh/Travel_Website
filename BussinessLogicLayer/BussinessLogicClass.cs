using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using BussinessObjectsNamespace;
using DataAccessNamespace;


namespace BussinessLogicNamespace
{
    public class BussinessLogicClass
    {
        DataAccessClass dataAccessObject = new DataAccessClass();                          // Global Data-Access Object. So that it Bussiness Logic layer can interact with DataAccess layer.
        #region AdminLoginMethod
        public int AdminLogin(BussinessObjectsClass bussinessObject)
        {
            if (bussinessObject.UserName == "Admin" && bussinessObject.Password == "123")  // Hardcoded Admin login Credentials. This is bad practice. I'll find a better way later. 
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        #endregion 
        #region AddBusMethod
        public int AddBus(BussinessObjectsClass bussinessObject)
        {
            int isQuerySuccessful = dataAccessObject.AddBus(bussinessObject);       // Addbus() method from DataAccess layer called and return value stored in isQuerySuccessful variable.
            return isQuerySuccessful;
        }
        #endregion
        #region ViewBusDetailsAdmin
        public DataSet ViewBus()
        {
            DataSet ds = dataAccessObject.ViewBusAdmin();                           // Store DataSet from ViewBusAdmin() method into another DatSet object. Remember this is because of 3-tier Architecture.
            return ds;                                                              // return DataSet.
        }
        #endregion
        #region DeleteBus
        public int DeleteBus(BussinessObjectsClass bussinessObject)
        {
            int isRecordDeleted = dataAccessObject.DeleteBus(bussinessObject);      // DeleteBus() method from Data-Access layer
            return isRecordDeleted;
        }
        #endregion
        #region EditBus
        public int EditBus(BussinessObjectsClass bussinessObject)
        {
            int isRecordEdited = dataAccessObject.EditBusDetails(bussinessObject);      // EditBusDetails() method from Data-Access layer
            return isRecordEdited;                                                      // return this to presentation layer
        }
        #endregion
        #region AutoGeneratePickupIds
        public string AutoGenPickupIDs()
        {
            string pickupId = "pid_";
            string generatedID = dataAccessObject.AutoGenPickupIDs();                                       // Get auto-generated ID from AutoGenPickupIDs() method.
            string[] idString = generatedID.Split('_');                                                     // Split the genrated value at "_". for ex: pid_0 will be splited into pid_ and 0;
            uint number = uint.Parse(idString[1]);                                                          // Will give out the numerical value in the string. 
            number++;
            pickupId = pickupId + number;
            return pickupId;
        }
        #endregion
        #region AddPickupPointInfo
        public int AddBusPickupPointInfo(BussinessObjectsClass bussinessObject)
        {
            int isBusPickupInfoAddedSuccessfully = dataAccessObject.AddBusPickupInfo(bussinessObject);      // Calling AddBusPickupInfo() from Data-Access layer.
            return isBusPickupInfoAddedSuccessfully;
        }
        #endregion
        #region ViewPickupPointsAdmin
        public DataSet ViewPickupPoints()
        {
            DataSet ds = dataAccessObject.ViewPickupPointsInfo();                   // Store DataSet from ViewPickupPointsInfo() method into another DatSet object.
            return ds;                                                              // return DataSet.
        }
        #endregion
        #region DeletePickupPoint
        public int DelPickupPoint(BussinessObjectsClass bussinessObject)
        {
            int isRecordDeleted = dataAccessObject.DeletePickupPoints(bussinessObject);      // DeletePickupPoints() method from Data-Access layer
            return isRecordDeleted;
        }
        #endregion
        #region GetBusNumber,StartPoint and Destination for BusPickup Point
        public SqlDataReader BusInfoForBusPickupPoint()
        {
            SqlDataReader dr = dataAccessObject.BusInfoForBusPickupPoint();
            return dr;
        }
        #endregion
        #region AddBusSpecificPickupPoint
        public int AddBusSpecificPickupPoint(BussinessObjectsClass bussinessObject)
        {
            int isBusPickupInfoAddeddSuccessfully = dataAccessObject.AddBusSpecificPickupPoint(bussinessObject);
            return isBusPickupInfoAddeddSuccessfully;
        }
        #endregion
        #region AutoGenerateDestinationIDs
        public string AutoGenDestinationIDs()
        {
            string destinationId = "did_";
            string generatedID = dataAccessObject.AutoGenDestinationIDs();                                  // Get last ID from AutoGenDestinationIDs() method.
            string[] idString = generatedID.Split('_');                                                     // Split the genrated value at "_". for ex: pid_0 will be splited into pid_ and 0;
            uint number = uint.Parse(idString[1]);                                                          // Will give out the numerical value in the string. 
            number++;
            destinationId = destinationId + number;                                                         // Incrememt Destination ID
            return destinationId;
        }
        #endregion
        #region AddDestinationPointInfo
        public int AddBusDestinationInfo(BussinessObjectsClass bussinessObject)
        {
            int isBusPickupInfoAddedSuccessfully = dataAccessObject.AddBusDestinationInfo(bussinessObject);      // Calling AddDestinationInfo() from Data-Access layer.
            return isBusPickupInfoAddedSuccessfully;
        }
        #endregion
        #region ViewDestinationPointsAdmin
        public DataSet ViewDestinationPoints()
        {
            DataSet ds = dataAccessObject.ViewDestinationPointsInfo();                   // Store DataSet from ViewDestinationPointsInfo() method into another DatSet object.
            return ds;                                                                   // return DataSet.
        }
        #endregion
        #region DeleteDestinationPoint
        public int DelDestinationPoint(BussinessObjectsClass bussinessObject)
        {
            int isRecordDeleted = dataAccessObject.DeleteDestinationPoints(bussinessObject);      // DeleteDestinationPoints() method from Data-Access layer
            return isRecordDeleted;
        }
        #endregion
        #region UpdateDestinationPoint
        public int UpdateDestinationPoint(BussinessObjectsClass bussinessObject)
        {
            int isRecordUpdated = dataAccessObject.UpdateDestinationPoints(bussinessObject);      
            return isRecordUpdated;
        }
        #endregion
    }
}
